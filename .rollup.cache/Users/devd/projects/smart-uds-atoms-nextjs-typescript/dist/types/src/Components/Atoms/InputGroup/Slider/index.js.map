{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../src/Components/Atoms/InputGroup/Slider/index.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,cAAc,CAAC;AACtB,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AAEtE,MAAM,MAAM,GAA0B,CAAC,EACrC,GAAG,EACH,GAAG,EACH,KAAK,EAAE,YAAY,EACnB,IAAI,GAAG,CAAC,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,GAAG,KAAK,EAChB,SAAS,GAAG,KAAK,EACjB,MAAM,EACN,UAAU,GACX,EAAE,EAAE;IACH,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC;IAEjD,MAAM,YAAY,GAAG,CAAC,KAA0C,EAAE,EAAE;QAClE,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,qCAAqC;IAC1D,CAAC,CAAC;IACF,MAAM,WAAW,GACf,8EAA8E,CAAC;IACjF,MAAM,WAAW,GAAG,UAAU,CAC5B,SAAS,EACT,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EACzB,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAClC,CAAC;IAEF,OAAO,CACL,eAAK,SAAS,EAAC,kBAAkB,aAC/B,gBACE,KAAK,EAAC,QAAQ,EACd,IAAI,EAAC,OAAO,EACZ,GAAG,EAAE,GAAG,EACR,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,YAAY,EACtB,SAAS,EAAE,gBAAgB,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,IAAI,WAAW,EAAE,EAC7E,QAAQ,EAAE,QAAQ,GAClB,EACF,cAAK,SAAS,EAAC,cAAc,YAAE,KAAK,GAAO,IACvC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import React, { useState } from 'react';\nimport { SliderProps } from './SliderProps.interface';\nimport './Slider.css';\nimport { classNames } from '@/Components/Utilities/componentsMethods';\n\nconst Slider: React.FC<SliderProps> = ({\n  min,\n  max,\n  value: initialValue,\n  step = 1,\n  onChange,\n  setStep,\n  disabled = false,\n  className = 'h-2',\n  border,\n  background,\n}) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.target.value);\n    setValue(newValue);\n    onChange(newValue);\n    setStep(newValue); // Update step based on the new value\n  };\n  const borderColor =\n    'border border-atom-input-/40 hover:border-atom-input focus:border-atom-input';\n  const sliderClass = classNames(\n    className,\n    border ? borderColor : '',\n    background ? '' : 'bg-atom-input'\n  );\n\n  return (\n    <div className=\"slider-container\">\n      <input\n        title=\"slider\"\n        type=\"range\"\n        min={min}\n        max={max}\n        value={value}\n        step={step}\n        onChange={handleChange}\n        className={`slider-thumb ${disabled ? 'slider-disabled' : ''} ${sliderClass}`}\n        disabled={disabled}\n      />\n      <div className=\"slider-value\">{value}</div>\n    </div>\n  );\n};\n\nexport default Slider;\n"]}