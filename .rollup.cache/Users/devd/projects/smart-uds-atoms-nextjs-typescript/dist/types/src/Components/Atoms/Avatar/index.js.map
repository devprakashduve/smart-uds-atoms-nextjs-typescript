{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/Components/Atoms/Avatar/index.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AACtE,OAAO,GAAG,MAAM,QAAQ,CAAC;AACzB,OAAO,cAAc,CAAC;AAEtB,MAAM,MAAM,GAA0B,CAAC,EACrC,GAAG,EACH,GAAG,EACH,IAAI,GAAG,EAAE,EACT,SAAS,EACT,KAAK,GAAG,GAAG,EACX,MAAM,GAAG,GAAG,EACZ,MAAM,GAAG,KAAK,EACd,OAAO,GAAG,KAAK,EACf,QAAQ,EACR,MAAM,GACP,EAAE,EAAE;IACH,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,MAAM,cAAc,GAClB,mBAAmB,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,cAAc,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;IAC3G,MAAM,gBAAgB,GAAG,UAAU,CACjC,KAAK,IAAI,MAAM,IAAI,WAAW,EAC9B,cAAc,CACf,CAAC;IACF,MAAM,UAAU,GAAG,4BAA4B,CAAC;IAEhD,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;IAErC,OAAO,CACL,eAAK,SAAS,EAAE,gBAAgB,aAC7B,SAAS,CAAC,CAAC,CAAC,CACX,KAAC,GAAG,IACF,SAAS,EAAE,UAAU,EACrB,GAAG,EAAE,GAAG,EACR,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,GAClC,CACH,CAAC,CAAC,CAAC,CACF,cACE,SAAS,EAAC,8GAA8G,EACxH,IAAI,EAAC,KAAK,gBACE,GAAG,YAEd,QAAQ,GACL,CACP,EACA,MAAM,IAAI,CACT,6BACc,eAAe,EAC3B,SAAS,EAAE,UAAU,CACnB,uDAAuD,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,EAAE,EACnG,MAAM,KAAK,QAAQ,IAAI,YAAY,EACnC,MAAM,KAAK,SAAS,IAAI,YAAY,EACpC,MAAM,KAAK,MAAM,IAAI,YAAY,EACjC,MAAM,KAAK,MAAM,IAAI,UAAU,CAChC,GACD,CACH,IACG,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import React, { useState } from 'react';\nimport { AvatarProps } from './AvatarProps.interface';\nimport { classNames } from '@/Components/Utilities/componentsMethods';\nimport Img from '../Img';\nimport './Avatar.css';\n\nconst Avatar: React.FC<AvatarProps> = ({\n  src,\n  alt,\n  size = 16,\n  className,\n  width = 105,\n  height = 105,\n  circle = false,\n  rounded = false,\n  initials,\n  status,\n}) => {\n  const [imageError, setImageError] = useState(false);\n  const dynamicClasses =\n    `overflow-hidden ${rounded ? 'rounded' : circle && 'rounded-full'} ${className ? className : ''}`.trim();\n  const containerClasses = classNames(\n    `w-${size} h-${size} relative`,\n    dynamicClasses\n  );\n  const imgClasses = 'w-full h-full object-cover';\n\n  const showImage = src && !imageError;\n\n  return (\n    <div className={containerClasses}>\n      {showImage ? (\n        <Img\n          className={imgClasses}\n          src={src}\n          alt={alt}\n          width={width}\n          height={height}\n          onError={() => setImageError(true)}\n        />\n      ) : (\n        <div\n          className=\"flex h-full w-full items-center justify-center bg-atom-avatar-background font-semibold text-atom-avatar-text\"\n          role=\"img\"\n          aria-label={alt}\n        >\n          {initials}\n        </div>\n      )}\n      {status && (\n        <div\n          data-testid=\"avatar-status\"\n          className={classNames(\n            `absolute h-3 w-3 rounded-full border-2 border-white ${circle ? 'right-2 top-2' : 'right-1 top-1'}`,\n            status === 'online' && 'bg-success',\n            status === 'offline' && 'bg-neutral',\n            status === 'away' && 'bg-warning',\n            status === 'busy' && 'bg-error'\n          )}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Avatar;\n"]}